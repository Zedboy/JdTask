<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:UControl="clr-namespace:Jlion.BrushClient.UControl;assembly=Jlion.BrushClient.UControl"
                    xmlns:pu="clr-namespace:Panuon.UI.Silver;assembly=Panuon.UI.Silver"
                    xmlns:local="clr-namespace:Jlion.BrushClient.Client.styles">

	<Style TargetType="UControl:ButtonEx" x:Key="ActiveButtonEx">
        <Setter Property="Background" Value="#3161a5"></Setter>
        <Setter Property="LeftBorderBrush" Value="#f8820d"></Setter>
	</Style>

	<Style TargetType="UControl:ButtonEx" x:Key="MenuButtonEx">
		<Setter Property="Background" Value="Transparent"></Setter>
		<Setter Property="MouseOverBackground" Value="#363757"></Setter>
		<!--<Setter Property="MouseOverForeground" Value="#2C2D4C"></Setter>-->
	</Style>

	<Style TargetType="UControl:ButtonEx" x:Key="FloatMenuButtonEx">
		<Setter Property="Background" Value="Transparent"></Setter>
		<Setter Property="Width" Value="75"></Setter>
		<Setter Property="IconSize" Value="26"></Setter>
		<Setter Property="Foreground" Value="#FFFFFF"></Setter>
		<Setter Property="FontSize" Value="12"></Setter>
	</Style>

	<!--收款界面部分-->

	<!--圆角按钮模板样式-->
	<ControlTemplate TargetType="Button" x:Key="PluginxButton">
		<Border Name="ButtonBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="5">
			<ContentPresenter Content="{TemplateBinding ContentControl.Content}" HorizontalAlignment="Center" VerticalAlignment="Center" />
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True" >
				<Setter TargetName="ButtonBorder"   Property="Background" Value="#3366D9"></Setter>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter TargetName="ButtonBorder"   Property="Background" Value="#3366D9"></Setter>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!--圆形图片-->
	<GeometryGroup x:Key="ClipGeometry" FillRule="Nonzero">
		<EllipseGeometry RadiusX="10" RadiusY="10" Center="10, 10"></EllipseGeometry>
	</GeometryGroup>

	<GeometryGroup x:Key="ClipGeometry_32" FillRule="Nonzero">
		<EllipseGeometry RadiusX="16" RadiusY="16" Center="16, 16"></EllipseGeometry>
	</GeometryGroup>
	<SolidColorBrush Color="#2c2f3e" Opacity="0.8" x:Key="OpacityBrush"/>

	<Style TargetType="TabItem">
		<Setter Property="Foreground" Value="White"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="#ACACAC"/>
		<Setter Property="Margin" Value="0"/>
		<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
		<Setter Property="VerticalContentAlignment" Value="Stretch"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabItem}">
					<Grid x:Name="templateRoot" >
						<StackPanel Orientation="Horizontal" VerticalAlignment="Center">
							<Image Source="..\resource\image\icon-serial.png" Width="20"></Image>
							<TextBlock Text="{Binding Header}" ToolTip="{TemplateBinding Header}" Foreground="{TemplateBinding Foreground}" TextTrimming="CharacterEllipsis"  VerticalAlignment="Center"></TextBlock>
						</StackPanel>
						<!--<Border x:Name="_underline" BorderBrush="#37aefe" BorderThickness="0" Margin="{TemplateBinding Margin}"/>
						<Grid>
							<TextBlock x:Name="txt" Visibility="Visible" VerticalAlignment="Center" HorizontalAlignment="Center" Text="{TemplateBinding Header}" ToolTip="{TemplateBinding Header}" Foreground="{TemplateBinding Foreground}" TextTrimming="CharacterEllipsis" />
						</Grid>-->
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="True">
							<Setter TargetName="templateRoot" Property="Background" Value="#FFFFFF" />
						</Trigger>
						<Trigger Property="IsSelected" Value="False">
							<Setter TargetName="templateRoot" Property="Background" Value="#F6F6FA" />
						</Trigger>
						<!--<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Top"/>
							</MultiDataTrigger.Conditions>

							-->
						<!--<Setter Property="Foreground" TargetName="txt" Value="#37aefe"/>-->
						<!--
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Left"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Opacity" TargetName="templateRoot" Value="0.56"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Bottom"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Opacity" TargetName="templateRoot" Value="0.56"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Right"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Opacity" TargetName="templateRoot" Value="0.56"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Top"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Opacity" TargetName="templateRoot" Value="0.56"/>
						</MultiDataTrigger>

						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Top"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Panel.ZIndex" Value="1"/>
							-->
						<!--<Setter Property="Foreground" TargetName="txt" Value="#37aefe"/>
							<Setter Property="BorderThickness" TargetName="_underline" Value="0 0 0 2"/>-->
						<!--
						</MultiDataTrigger>-->
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Combox 样式-->
	<Style TargetType="ToggleButton" x:Key="ComboxStyleBtn">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate>
					<Border x:Name="Back" Background="White" BorderThickness="0" BorderBrush="Transparent">
						<Path Name="PathFill" Fill="#8a8a8a" Width="8" Height="6" StrokeThickness="0" Data="M5,0 L10,10 L0,10 z" RenderTransformOrigin="0.5,0.5" Stretch="Fill">
							<Path.RenderTransform>
								<TransformGroup>
									<ScaleTransform/>
									<SkewTransform/>
									<RotateTransform Angle="180"/>
									<TranslateTransform/>
								</TransformGroup>
							</Path.RenderTransform>
						</Path>
					</Border>
					<ControlTemplate.Triggers>
						<!--<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="PathFill" Property="Fill" Value="White"></Setter>
							<Setter TargetName="Back" Property="Background" Value="White"></Setter>
							<Setter TargetName="Back" Property="BorderBrush" Value="White"></Setter>
						</Trigger>-->
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Combox-->
	<Style TargetType="ComboBox" x:Key="ComboBoxStyle">
		<Setter Property="ItemContainerStyle">
			<Setter.Value>
				<!--ComBoxItem-->
				<Style TargetType="ComboBoxItem">
					<Setter Property="MinHeight" Value="22"></Setter>
					<Setter Property="MinWidth" Value="60"></Setter>
					<Setter Property="Height" Value="25"></Setter>
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="ComboBoxItem">
								<Border Name="Back" Background="Transparent"  BorderThickness="0,0,0,0" BorderBrush="{TemplateBinding BorderBrush}" >
									<ContentPresenter ContentSource="{Binding Source}" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="5,0,0,0"></ContentPresenter>
								</Border>
								<ControlTemplate.Triggers>
									<Trigger Property="IsMouseOver" Value="True">
										<Setter TargetName="Back" Property="Background" Value="Red"></Setter>
									</Trigger>
									<Trigger Property="IsHighlighted" Value="True">
										<Setter TargetName="Back" Property="Background" Value="#E7E7F4"></Setter>
									</Trigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ComboBox">
					<Border BorderThickness="1" BorderBrush="#D0D0D0">
						<Grid Background="#E7E7F4">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="0.7*"/>
								<ColumnDefinition Width="0.3*" MaxWidth="30"/>
							</Grid.ColumnDefinitions>
							<TextBox Grid.Column="0" BorderThickness="0" IsReadOnly="{TemplateBinding IsReadOnly}" VerticalAlignment="Center"  Height="{TemplateBinding Height}" Padding="5,0,0,0" Text="{TemplateBinding Text}"></TextBox>
							<Border Grid.Column="0" BorderThickness="0" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="0"></Border>

							<Border Grid.Column="1" BorderThickness="0" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="0">
								<ToggleButton Style="{StaticResource ComboxStyleBtn}" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"></ToggleButton>
							</Border>
							<Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="None" HorizontalOffset="-1">
								<Border x:Name="DropDown" SnapsToDevicePixels="True">
									<!--<Border.Effect>
										<DropShadowEffect Color="#EAEAEA" Direction="90" BlurRadius="1" ShadowDepth="3" Opacity="1"/>
									</Border.Effect>-->
									<Border CornerRadius="0 0 1 1" BorderBrush="#D0D0D0" BorderThickness="1" Margin="0 5 0 0" Width="{TemplateBinding ActualWidth}">
										<ScrollViewer Width="{TemplateBinding Width}" Style="{DynamicResource ScrollViewerStyle}" MaxHeight="{TemplateBinding MaxDropDownHeight}" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">
											<!-- StackPanel 用于显示子级，方法是将 IsItemsHost 设置为 True -->
											<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Background="White"/>
										</ScrollViewer>
									</Border>
								</Border>
							</Popup>
						</Grid>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Combox Close-->



	<!--快捷键label样式-->
	<Style TargetType="Label" x:Key="LabelWidth">
		<Setter Property="Width" Value="120"></Setter>
		<Setter Property="HorizontalContentAlignment" Value="Right"></Setter>
	</Style>
	<Style TargetType="Label" x:Key="LabelWidthRight">
		<Setter Property="Width" Value="120"></Setter>
		<Setter Property="Margin" Value="80,0,0,0"></Setter>
		<Setter Property="HorizontalContentAlignment" Value="Right"></Setter>
	</Style>

	<!--输入框样式-->
	<Style TargetType="TextBox">
		<Setter Property="BorderBrush" Value="#E0E0E0"></Setter>
		<Setter Property="BorderThickness" Value="1"></Setter>
		<Setter Property="Height" Value="24"></Setter>
		<Setter Property="VerticalContentAlignment" Value="Center"></Setter>
		<!--<Style.Triggers>
			<Trigger Property="IsFocused" Value="True">
				<Setter Property="BorderBrush" Value="#F2143F"></Setter>
			</Trigger>
		</Style.Triggers>-->
	</Style>

	<Style TargetType="UControl:NumberBoxEx">
		<Setter Property="BorderBrush" Value="#E0E0E0"></Setter>
		<Setter Property="BorderThickness" Value="1"></Setter>
		<Setter Property="Height" Value="26"></Setter>
		<Setter Property="VerticalContentAlignment" Value="Center"></Setter>
		<!--<Style.Triggers>
			<Trigger Property="IsFocused" Value="True">
				<Setter Property="BorderBrush" Value="#F2143F"></Setter>
			</Trigger>
		</Style.Triggers>-->
	</Style>

	<Style TargetType="pu:Calendar">
		<Setter Property="FontSize" Value="12"></Setter>
	</Style>

	<Style TargetType="pu:DateTimePicker" x:Key="DateTimePickerStyle">
		<Setter Property="BorderBrush" Value="#E0E0E0"></Setter>
		<Setter Property="FontSize" Value="12"></Setter>
		<Setter Property="Padding" Value="-10 0 0 0"></Setter>
		<Setter Property="CornerRadius" Value="0"></Setter>
		<Setter Property="Icon" Value=""></Setter>
	</Style>

	<Style TargetType="Label">
		<Setter Property="Foreground" Value="#FF323232"></Setter>
	</Style>

	<!--全局CheckBox 样式-->
	<Style TargetType="CheckBox">
		<Setter Property="BorderBrush" Value="#FFE0E0E0"></Setter>
	</Style>

	<!--Combox-->
	<Style TargetType="ComboBox" x:Key="ComboxStyleWhite">
		<Setter Property="ItemContainerStyle">
			<Setter.Value>
				<!--ComBoxItem-->
				<Style TargetType="ComboBoxItem">
					<Setter Property="MinHeight" Value="22"></Setter>
					<Setter Property="MinWidth" Value="60"></Setter>
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="ComboBoxItem">
								<Border Name="Back" Background="Transparent"  BorderThickness="0,0,0,0" BorderBrush="White" >
									<ContentPresenter ContentSource="{Binding Source}" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="10,0,0,0" ></ContentPresenter>
								</Border>
								<ControlTemplate.Triggers>
									<Trigger Property="IsMouseOver" Value="True">
										<Setter TargetName="Back" Property="Background" Value="White"></Setter>
									</Trigger>
									<!--下拉框背景色-->
									<Trigger Property="IsHighlighted" Value="True">
										<Setter TargetName="Back" Property="Background" Value="White"></Setter>
									</Trigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ComboBox">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="0.7*"/>
							<ColumnDefinition Width="0.3*" MaxWidth="30"/>
						</Grid.ColumnDefinitions>
						<!--文字区域背景和边线样式-->
						<TextBox Background="White" VerticalAlignment="Center" Grid.Column="0" Foreground="#999999" BorderBrush="White" BorderThickness="0" IsReadOnly="{TemplateBinding IsReadOnly}" Text="{TemplateBinding Text}"></TextBox>
						<Border  Grid.Column="0" BorderThickness="1" BorderBrush="White">

						</Border>
						<!--右侧下拉button设置-->
						<Border Grid.Column="1" BorderThickness="0" BorderBrush="White" CornerRadius="0">
							<ToggleButton BorderThickness="0" BorderBrush="White" Style="{StaticResource ComboxStyleBtn}" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"></ToggleButton>
						</Border>
						<!--弹出popup整体设置-->
						<Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide" >
							<!--弹出popup边框-->
							<Border CornerRadius="1" BorderBrush="#cecece" BorderThickness="1,0,1,1" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
								<Border.Effect>
									<DropShadowEffect Color="Black" BlurRadius="2" ShadowDepth="0" Opacity="1"/>
								</Border.Effect>
								<!--下拉幕布边界背景设置 MaxHeight="{TemplateBinding MaxDropDownHeight}"-->
								<ScrollViewer Margin="0,0,0,0"   SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" BorderBrush="White" BorderThickness="2" >
									<!-- StackPanel 用于显示子级，方法是将 IsItemsHost 设置为 True -->
									<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Background="White" />
								</ScrollViewer>
							</Border>
						</Popup>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>